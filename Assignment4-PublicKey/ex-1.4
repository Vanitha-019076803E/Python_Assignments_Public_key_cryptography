
def keyGen(n=256):
    "Generates an RSA key"
    while True:
        p=random_prime(2^(n//2));q=random_prime(2^(n//2));e=3
        if gcd(e,(p-1)*(q-1))==1: break
    d=inverse_mod(e,(p-1)*(q-1))
    Nn=p*q
    print("p=",p,"q=",q)
    print("N=",Nn)
    print("Size of N:",Nn.nbits())
    return Nn,p,q,e,d

"Finds a small root of polynomial x^3+ax^2+bx+c=0 mod N"
def CopPolyDeg3(a,b,c,Nn):
    n=Nn.nbits()
    X=2^(n//6-3)
    M=matrix(ZZ,[[X^3,a*X^2,b*X,c],\
                 [0,Nn*X^2,0,0],\
                 [0,0,Nn*X,0],\
                 [0,0,0,Nn]])
    V=M.LLL()
    v=V[0]
    R.<x> = ZZ[]
    f=sum(v[i]*x^(3-i)/X^(3-i) for i in range(4))
    return f.roots()


def test_deg3():
    Nn=709346188783707808067985067028456920198443445150943868007539748700843008346940940287222002891029537499396908056848095671838771377752278390679951948808475707450073714577930152529057057137554724537719912515486712408422541711159469388603174949214558211229232753033853223644282969544939436208933732047182752629
    n=Nn.nbits()
    x0=ZZ.random_element(2^(n//6-10))
    a=3*(2**1016)
    b=3*(2**2032)
    ciphertext = 106931790228306983984681105468768847489271870726744288161524001625441564428928138082764847546330455645721020672129383569332864980247631047991368975076235508102167034128121821366927744907882617928973322081585262275454789559141797135693781509609801881376951044409238368040773136628352506077437800520604807524
    c = 2 ^ (1016 * 3) - ciphertext
    print("The recovered message is ")
    print(CopPolyDeg3(a,b,c,Nn))


if __name__== "__main__":
    test_deg3()
    
